package com.hellblazer.primeMover.asm;

import io.github.classgraph.ClassGraph;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test suite for SimulationTransform to ensure it produces structurally equivalent results to both the original
 * SimulationTransformOriginal and SimulationTransformRefactored implementations.
 */
public class SimulationTransformTest {

    private SimulationTransform classFileTransform;

    @BeforeEach
    public void setUp() {
        var classGraph = new ClassGraph().acceptPackages("com.hellblazer.primeMover.asm.testClasses",
                                                         "com.hellblazer.primeMover");
        classFileTransform = new SimulationTransform(classGraph);
    }

    @AfterEach
    public void tearDown() throws Exception {
        if (classFileTransform != null) {
            classFileTransform.close();
        }
    }

    @Test
    public void testClassFileTransformFunctionality() throws Exception {
        // Test that ClassFile API transform provides all expected functionality
        final var className = "com.hellblazer.primeMover.asm.testClasses.MyTest";

        // Test generatorOf
        var generator = classFileTransform.generatorOf(className);
        assertNotNull(generator, "Should create generator for known entity class");

        // Test generators
        var generators = classFileTransform.generators();
        assertTrue(generators.size() > 0, "Should find entity classes");

        // Test transformed
        var transformed = classFileTransform.transformed();
        assertTrue(transformed.size() > 0, "Should transform classes");

        // Test that generated bytecode is valid
        byte[] bytecode = generator.generate();
        assertTrue(bytecode.length > 0, "Should generate non-empty bytecode");

        // Test that bytecode is valid by parsing it
        ClassReader reader = new ClassReader(bytecode);
        ClassNode classNode = new ClassNode();
        reader.accept(classNode, 0);

        assertEquals(className.replace('.', '/'), classNode.name, "Generated class should have correct name");
        assertTrue(classNode.methods.size() > 0, "Generated class should have methods");
    }

}

/*
 * Copyright (C) 2023 Hal Hildebrand. All rights reserved.
 *
 * This file is part of the Prime Mover Event Driven Simulation Framework.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.hellblazer.primeMover.asm;

import com.hellblazer.primeMover.api.EntityReference;
import io.github.classgraph.ClassGraph;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.nio.ByteBuffer;

/**
 * Test for the refactored EntityGeneratorOriginal to verify clarity improvements
 *
 * @author hal.hildebrand
 */
public class EntityGeneratorRefactoredTest {

    @Test
    public void testRefactoredGeneratorCompiles() throws Exception {
        var transform = new SimulationTransformOriginal(
        new ClassGraph().acceptPackages("com.hellblazer.primeMover.asm.testClasses", "testClasses"));

        final var name = "com.hellblazer.primeMover.asm.testClasses.MyTest";

        // Create refactored version with same inputs
        try (var scanResult = new ClassGraph().acceptPackages("com.hellblazer.primeMover.asm.testClasses")
                                              .enableAllInfo()
                                              .scan()) {

            var classInfo = scanResult.getClassesWithAnnotation("com.hellblazer.primeMover.annotations.Entity").get(
            name);
            Assertions.assertNotNull(classInfo);

            var events = classInfo.getDeclaredMethodInfo().stream().filter(m -> m.isPublic() && !m.isStatic()).collect(
            java.util.stream.Collectors.toSet());

            var refactoredGenerator = new EntityGeneratorRefactored(classInfo, events);
            var cw = refactoredGenerator.generate();
            Assertions.assertNotNull(cw);

            final var bytes = cw.toByteArray();
            Assertions.assertNotNull(bytes);
            Assertions.assertTrue(bytes.length > 0);

            System.out.println("✅ Refactored EntityGeneratorOriginal successfully generated bytecode!");
            System.out.println("Bytecode size: " + bytes.length + " bytes");
        }
    }

    @Test
    public void testRefactoredGeneratorFunctionality() throws Exception {
        try (var scanResult = new ClassGraph().acceptPackages("com.hellblazer.primeMover.asm.testClasses")
                                              .enableAllInfo()
                                              .scan()) {

            final var name = "com.hellblazer.primeMover.asm.testClasses.MyTest";
            var classInfo = scanResult.getClassesWithAnnotation("com.hellblazer.primeMover.annotations.Entity").get(
            name);
            Assertions.assertNotNull(classInfo);

            var events = classInfo.getDeclaredMethodInfo().stream().filter(m -> m.isPublic() && !m.isStatic()).collect(
            java.util.stream.Collectors.toSet());

            var generator = new EntityGeneratorRefactored(classInfo, events);
            var cw = generator.generate();
            final var bytes = cw.toByteArray();

            var loader = new ClassLoader(getClass().getClassLoader()) {
                {
                    defineClass(name, ByteBuffer.wrap(bytes), null);
                }
            };

            var clazz = loader.loadClass(name);

            // Verify it implements EntityReference
            Assertions.assertTrue(EntityReference.class.isAssignableFrom(clazz));

            // The generated class should have the required EntityReference methods
            var invokeMethod = clazz.getMethod("__invoke", int.class, Object[].class);
            Assertions.assertNotNull(invokeMethod);

            var signatureMethod = clazz.getMethod("__signatureFor", int.class);
            Assertions.assertNotNull(signatureMethod);

            System.out.println("✅ Refactored EntityGeneratorOriginal provides complete EntityReference interface!");
            System.out.println("Generated class: " + clazz.getName());
            System.out.println("Implements EntityReference: " + EntityReference.class.isAssignableFrom(clazz));
        }
    }
}
